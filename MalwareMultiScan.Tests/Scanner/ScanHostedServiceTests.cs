using System;
using System.Threading.Tasks;
using EasyNetQ;
using MalwareMultiScan.Backends.Interfaces;
using MalwareMultiScan.Backends.Messages;
using MalwareMultiScan.Scanner.Services.Implementations;
using MalwareMultiScan.Scanner.Services.Interfaces;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;

namespace MalwareMultiScan.Tests.Scanner
{
    public class ScanHostedServiceTests
    {
        private Mock<IBus> _busMock;
        private Mock<IScanBackend> _scanBackendMock;
        private IScanHostedService _scanHostedService;

        [SetUp]
        public void SetUp()
        {
            _busMock = new Mock<IBus>();

            _scanBackendMock = new Mock<IScanBackend>();

            _scanBackendMock
                .SetupGet(x => x.Id)
                .Returns("dummy");

            _scanHostedService = new ScanHostedService(
                Mock.Of<ILogger<ScanHostedService>>(),
                _scanBackendMock.Object,
                _busMock.Object);
        }

        [Test]
        public async Task TestBusReceiveScanResultMessage()
        {
            await _scanHostedService.StartAsync(default);

            _busMock.Verify(
                x => x.Receive("dummy", It.IsAny<Action<ScanRequestMessage>>()));
        }

        [Test]
        public async Task TestBusIsDisposedOnStop()
        {
            await _scanHostedService.StopAsync(default);

            _busMock.Verify(x => x.Dispose(), Times.Once);
        }
    }
}