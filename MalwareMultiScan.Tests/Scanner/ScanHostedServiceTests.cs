using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using EasyNetQ;
using MalwareMultiScan.Backends.Interfaces;
using MalwareMultiScan.Backends.Messages;
using MalwareMultiScan.Scanner.Services.Implementations;
using MalwareMultiScan.Scanner.Services.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Memory;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;

namespace MalwareMultiScan.Tests.Scanner
{
    public class ScanHostedServiceTests
    {
        private Mock<IBus> _busMock;
        private Mock<IScanBackend> _scanBackendMock;
        private IScanHostedService _scanHostedService;

        [SetUp]
        public void SetUp()
        {
            var configuration = new ConfigurationRoot(new List<IConfigurationProvider>
            {
                new MemoryConfigurationProvider(new MemoryConfigurationSource())
            })
            {
                ["ResultsSubscriptionId"] = "mms.results"
            };

            _busMock = new Mock<IBus>();

            _busMock
                .Setup(x => x.Receive("dummy", It.IsAny<Func<ScanRequestMessage, Task>>()))
                .Callback<string, Func<ScanRequestMessage, Task>>((s, func) =>
                {
                    var task = func.Invoke(new ScanRequestMessage
                    {
                        Id = "test",
                        Uri = new Uri("http://test.com")
                    });

                    task.Wait();
                });

            _scanBackendMock = new Mock<IScanBackend>();

            _scanBackendMock
                .Setup(x => x.ScanAsync(It.IsAny<Uri>(), It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult(new[] {"Test"}));

            _scanBackendMock
                .SetupGet(x => x.Id)
                .Returns("dummy");

            _scanHostedService = new ScanHostedService(
                Mock.Of<ILogger<ScanHostedService>>(),
                _scanBackendMock.Object,
                _busMock.Object,
                configuration);
        }

        [Test]
        public async Task TestBusReceiveScanResultMessage()
        {
            await _scanHostedService.StartAsync(default);

            _busMock.Verify(x => x.SendAsync("mms.results", It.Is<ScanResultMessage>(
                m => m.Succeeded && m.Backend == "dummy" && m.Id == "test" && m.Threats.Contains("Test")
            )));
        }

        [Test]
        public async Task TestBusIsDisposedOnStop()
        {
            await _scanHostedService.StopAsync(default);

            _busMock.Verify(x => x.Dispose(), Times.Once);
        }
    }
}