using System.IO;
using System.Linq;
using System.Threading.Tasks;
using MalwareMultiScan.Api.Data.Models;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.GridFS;

namespace MalwareMultiScan.Api.Services
{
    public class ScanResultService
    {
        private const string CollectionName = "ScanResults";
        private readonly GridFSBucket _bucket;

        private readonly IMongoCollection<ScanResult> _collection;

        private readonly ScanBackendService _scanBackendService;

        public ScanResultService(IMongoDatabase db, ScanBackendService scanBackendService)
        {
            _scanBackendService = scanBackendService;

            _collection = db.GetCollection<ScanResult>(CollectionName);
            _bucket = new GridFSBucket(db);
        }

        public async Task<ScanResult> CreateScanResult()
        {
            var scanResult = new ScanResult
            {
                Results = _scanBackendService.List.ToDictionary(
                    k => k.Id, v => new ScanResultEntry())
            };

            await _collection.InsertOneAsync(scanResult);

            return scanResult;
        }

        public async Task<ScanResult> GetScanResult(string id)
        {
            var result = await _collection.FindAsync(
                Builders<ScanResult>.Filter.Where(r => r.Id == id));

            return await result.FirstOrDefaultAsync();
        }

        public async Task UpdateScanResultForBackend(string resultId, string backendId,
            bool completed = false, bool succeeded = false, string[] threats = null)
        {
            var filterScanResult = Builders<ScanResult>.Filter.Where(r => r.Id == resultId);

            var updateScanResult = Builders<ScanResult>.Update.Set(r => r.Results[backendId], new ScanResultEntry
            {
                Completed = completed,
                Succeeded = succeeded,
                Threats = threats
            });

            await _collection.UpdateOneAsync(filterScanResult, updateScanResult);
        }

        public async Task QueueUrlScan(ScanResult result, string fileUrl)
        {
            foreach (var backend in _scanBackendService.List)
                await _scanBackendService.QueueUrlScan(result, backend, fileUrl);
        }

        public async Task<string> StoreFile(string fileName, Stream fileStream)
        {
            var objectId = await _bucket.UploadFromStreamAsync(
                fileName, fileStream);

            return objectId.ToString();
        }

        public async Task<Stream> ObtainFile(string id)
        {
            if (!ObjectId.TryParse(id, out var objectId))
                return null;

            return await _bucket.OpenDownloadStreamAsync(objectId, new GridFSDownloadOptions
            {
                Seekable = true
            });
        }
    }
}