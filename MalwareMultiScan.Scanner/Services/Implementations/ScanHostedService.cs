using System.Threading;
using System.Threading.Tasks;
using EasyNetQ;
using Hangfire;
using MalwareMultiScan.Backends.Interfaces;
using MalwareMultiScan.Backends.Messages;
using MalwareMultiScan.Scanner.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace MalwareMultiScan.Scanner.Services.Implementations
{
    /// <inheritdoc />
    public class ScanHostedService : IScanHostedService
    {
        private readonly IScanBackend _backend;
        private readonly IBus _bus;
        private readonly ILogger<ScanHostedService> _logger;

        /// <summary>
        /// Initialise scan hosted service.
        /// </summary>
        /// <param name="logger">Logger.</param>
        /// <param name="backend">Scan backend.</param>
        /// <param name="bus">EasyNetQ bus.</param>
        public ScanHostedService(
            ILogger<ScanHostedService> logger,
            IScanBackend backend, IBus bus)
        {
            _logger = logger;
            _bus = bus;
            _backend = backend;
        }

        /// <inheritdoc />
        public Task StartAsync(CancellationToken cancellationToken)
        {
            _bus.Receive<ScanRequestMessage>(_backend.Id, message =>
                BackgroundJob.Enqueue<IScanBackgroundJob>(j => j.Process(message)));

            _logger.LogInformation(
                $"Started scan hosting service for the backend {_backend.Id}");

            return Task.CompletedTask;
        }

        /// <inheritdoc />
        public Task StopAsync(CancellationToken cancellationToken)
        {
            _bus.Dispose();

            _logger.LogInformation(
                $"Stopped scan hosting service for the backend {_backend.Id}");

            return Task.CompletedTask;
        }
    }
}